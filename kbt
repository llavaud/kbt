#!/usr/bin/env perl

use 5.010;

use strict;
use warnings;

use File::Basename qw/fileparse/;
use File::Path qw/make_path/;
use File::Temp qw/tempfile/;
use File::Which qw/which/;
use Getopt::Long qw/GetOptions HelpMessage/;
use HTTP::Request;
use IO::File;
use JSON qw/to_json from_json/;
use LWP::UserAgent;

GetOptions(
    'file=s'       => \(my $file = 'kbt_export.json'),
    'help'         => sub { HelpMessage(0) },
    'host=s'       => \(my $h = 'http://localhost:9200'),
    'index=s'      => \(my $index = '.kibana'),
    'overwrite'    => \(my $overwrite = 0),
    'ssl_noverify' => \(my $ssl_noverify),
    'type=s'       => \(my $type = 'all'),
) or HelpMessage(1);

my ($scheme, $host, $port) = $h =~ /^(?:(https?)\:\/\/)?([^:]+)(?:\:(\d*))?$/;

$scheme //= 'http';
$port //= '9200';
my $s3 = ($file =~ /^s3:\/\//) ? 1 : 0;

my $cmd = $ARGV[0];

# params check
HelpMessage('[ERROR] Bad number of arguments') if @ARGV != 1;
HelpMessage('[ERROR] Bad value for \'type\'') if $type !~ /^(?:all|search|visualization|dashboard)$/;
HelpMessage('[ERROR] Invalid hostname') if $host !~ /^[\w\-\.]+$/;
HelpMessage('[ERROR] Bad file format') if not $s3 and $file !~ /^[\/\w\-\.]+[^\/]$/;
HelpMessage('[ERROR] Bad file format') if $s3 and $file !~ /^s3:\/\/[\/\w\-\.]+[^\/]$/;
HelpMessage('[ERROR] Missing awscli binary') if $s3 and not which('aws');

if ($cmd eq 'list') {
    list(0);
}
elsif ($cmd eq 'export') {
    export();
}
elsif ($cmd eq 'import') {
    import();
}
else {
    HelpMessage("[ERROR] Bad command");
}

exit 0;

sub list {
    my $export = shift;

    my $ctype;
    my $ctitle;
    my $ids = { 'docs' => [] };

# define list output format
format STDOUT_TOP =
Type            Title
-------------   ----------------------------------------------------------------
.
format STDOUT =
@<<<<<<<<<<<<   @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<...
$ctype, $ctitle
.

    foreach my $t ('search', 'visualization', 'dashboard') {

        next if ($type ne 'all' and $t ne $type);

        my $ua = LWP::UserAgent->new;
        $ua->ssl_opts('verify_hostname' => '0') if defined $ssl_noverify;
        my $request = HTTP::Request->new(POST => "$scheme://$host:$port/$index/$t/_search?size=1000&scroll=1m&sort=_doc");
        $request->content('{"query":{"match_all":{}}}');
        $request->accept_decodable();
        my $response = $ua->request($request);

        if ($response->is_success) {
            my $json = from_json($response->decoded_content);
            foreach my $doc (sort { $a->{'_source'}->{'title'} cmp $b->{'_source'}->{'title'} } @{ $json->{'hits'}->{'hits'} }) {
                if ($export == 0) {
                    $ctype = $t;
                    $ctitle = $doc->{'_source'}->{'title'};
                    write STDOUT;
                }
                elsif ($export == 1) {
                    push @{ $ids->{'docs'} }, { '_id' => $doc->{'_id'}, '_type' => $t };
                }
            }
        }
        else {
            print STDERR "Failed to get \'$t\' id(s): ".$response->status_line."\n";
        }
    }

    return ($export == 1) ? $ids : 1; 
}

sub export {
    my $ids = list(1);

    # no documents to export
    return 1 if @{ $ids->{'docs'} } < 1;

    my $json = to_json($ids);

    my $ua = LWP::UserAgent->new;
    $ua->ssl_opts('verify_hostname' => '0') if defined $ssl_noverify;
    my $request = HTTP::Request->new(POST => "$scheme://$host:$port/$index/_mget");
    $request->content($json);
    $request->accept_decodable();
    my $response = $ua->request($request);

    if ($response->is_success) {
        my $res = from_json($response->decoded_content);
        my $export = [];
        foreach my $doc (@{ $res->{'docs'} }) {
            delete $doc->{'found'};
            delete $doc->{'_version'};
            delete $doc->{'_index'};
            push @{ $export }, $doc;
        }
        write_file(to_json($export));
    }
    else {
        print STDERR "Failed to export documents: ".$response->status_line."\n";
    }

    return 1;
}

sub write_file {
    my $json = shift;

    if ($s3) {
        my $tmp_file = File::Temp->new('kbt.XXXXXX', DIR => '/tmp');
        my $fh = IO::File->new($tmp_file, q{>});
        if (defined $fh) {
            print $fh $json;
            close $fh;
        } else {
            die "Failed to open temporary file \'$tmp_file\': $!\n";
        }
        if (system("aws s3 cp --quiet $tmp_file $file")) {
            die "Failed to upload to \'$file\'\n";
        }
    } else {
        my ($name, $dir, $ext) = fileparse($file, qr/\.[^.]*/);
        make_path $dir unless -d $dir;
        my $fh = IO::File->new($file, q{>});
        if (defined $fh) {
            print $fh $json;
            close $fh;
        } else {
            die "Failed to open file \'$file\': $!\n";
        }
    }

    return 1;
}

sub import {
    my $import = read_file();

    my $create = $overwrite ? '' : '/_create';

    foreach my $doc (@{ $import }) {
        next if ($type ne 'all' and $doc->{'_type'} ne $type);

        my $ua = LWP::UserAgent->new;
        $ua->ssl_opts('verify_hostname' => '0') if defined $ssl_noverify;
        my $request = HTTP::Request->new(POST => "$scheme://$host:$port/$index/$doc->{'_type'}/$doc->{'_id'}$create");
        $request->content(to_json($doc->{'_source'}));
        $request->accept_decodable();
        my $response = $ua->request($request);
        print STDERR "Failed to import \'$doc->{'_id'}\' ($doc->{'_type'}): ".$response->status_line."\n"
            if (!$response->is_success and $response->code != 409);
    }

    return 1;
}

sub read_file {
    my $json;

    if ($s3) {
        my $tmp_file = File::Temp->new('kbt.XXXXXX', DIR => '/tmp');
        if (system("aws s3 cp --quiet $file $tmp_file")) {
            die "Failed to download from \'$file\'\n";
        }
        if (my $fh = IO::File->new($tmp_file, q{<})) {
            $json = <$fh>;
            close $fh;
        } else {
            die "Failed to open file \'$tmp_file\': $!\n";
        }
    } else {
        if (my $fh = IO::File->new($file, q{<})) {
            $json = <$fh>;
            close $fh;
        } else {
            die "Failed to open file \'$file\': $!\n";
        }
    }

    return from_json($json);
}

__END__

=encoding utf8

=head1 NAME

kbt - Kibana Backup Tool

=head1 DESCRIPTION

This script allow to list, export and import kibana resources (search, visualization and dashboard).

=head1 SYNOPSIS

kbt [OPTIONS] <COMMAND>

 OPTIONS
   --file          FILE|S3_SCHEME       File to export/import (defaults to kbt_export.json)
   --help                               Print this help
   --host          [SCHEME]IP[:PORT]    Ip address of elasticsearch instance (defaults to http://localhost:9200)
   --index         INDEX                Kibana index (defaults to .kibana)
   --overwrite                          Overwrite existing documents during import (default is to skip existing docs)
   --ssl_noverify                       Do not verify matching hostname if ssl is enabled (verify by default)
   --type          TYPE                 Type of kibana resources {search|visualization|dashboard} (defaults to all)

 COMMAND
   list                                 list resource's id
   export                               export resources
   import                               import resources

Examples:

  * export all resources in a local file
      kbt export --file my_json

  * export search resources in file on S3
      kbt export --type search --file s3://my_bucket/my_json

=head1 AUTHOR

Laurent Lavaud

=head1 VERSION

0.11

=cut
